package Prototype_ChocoSolver;

public class TSP_Heuristique_30 {
    public static void main(String[] args) {
        int C = 30;
        int[][] D = new int[][]{
                {0, 489, 122, 902, 665, 458, 246, 512, 805, 821, 219, 635, 935, 731, 984, 355, 509, 313, 643, 716, 710, 231, 102, 344, 965, 938, 927, 455, 542, 700},
                {489, 0, 907, 45, 275, 319, 345, 393, 986, 626, 548, 569, 742, 364, 263, 656, 264, 145, 416, 743, 153, 430, 979, 691, 802, 199, 426, 419, 427, 832},
                {122, 907, 0, 246, 197, 614, 331, 523, 815, 860, 292, 933, 624, 571, 598, 274, 245, 254, 114, 327, 802, 482, 344, 742, 107, 523, 700, 674, 310, 159},
                {902, 45, 246, 0, 404, 537, 608, 702, 352, 274, 616, 918, 849, 234, 471, 914, 744, 887, 471, 620, 120, 491, 650, 727, 494, 483, 331, 931, 398, 201},
                {665, 275, 197, 404, 0, 473, 319, 964, 263, 267, 767, 788, 361, 256, 264, 852, 895, 529, 582, 269, 824, 658, 287, 301, 950, 122, 203, 877, 351, 712},
                {458, 319, 614, 537, 473, 0, 909, 127, 684, 150, 892, 178, 254, 761, 380, 951, 789, 305, 552, 572, 933, 329, 180, 735, 122, 208, 821, 692, 500, 748},
                {246, 345, 331, 608, 319, 909, 0, 523, 616, 828, 523, 381, 566, 398, 304, 948, 550, 854, 239, 982, 282, 897, 401, 466, 326, 517, 903, 243, 511, 233},
                {512, 393, 523, 702, 964, 127, 523, 0, 271, 405, 397, 554, 974, 706, 380, 944, 385, 453, 324, 290, 529, 802, 542, 632, 939, 473, 593, 828, 928, 962},
                {805, 986, 815, 352, 263, 684, 616, 271, 0, 871, 505, 646, 882, 834, 464, 391, 213, 226, 538, 673, 481, 992, 808, 942, 730, 848, 306, 148, 682, 328},
                {821, 626, 860, 274, 267, 150, 828, 405, 871, 0, 198, 310, 563, 343, 344, 748, 590, 158, 882, 358, 965, 177, 738, 249, 150, 152, 552, 496, 596, 102},
                {219, 548, 292, 616, 767, 892, 523, 397, 505, 198, 0, 192, 677, 426, 117, 529, 525, 265, 292, 825, 534, 259, 791, 433, 825, 769, 438, 167, 557, 168},
                {635, 569, 933, 918, 788, 178, 381, 554, 646, 310, 192, 0, 963, 481, 535, 679, 486, 186, 954, 918, 289, 114, 564, 383, 862, 369, 393, 314, 605, 570},
                {935, 742, 624, 849, 361, 254, 566, 974, 882, 563, 677, 963, 0, 265, 801, 156, 293, 418, 746, 533, 203, 482, 729, 852, 510, 447, 786, 227, 461, 918},
                {731, 364, 571, 234, 256, 761, 398, 706, 834, 343, 426, 481, 265, 0, 473, 342, 615, 524, 509, 717, 484, 682, 651, 700, 816, 189, 320, 411, 538, 231},
                {984, 263, 598, 471, 264, 380, 304, 380, 464, 344, 117, 535, 801, 473, 0, 620, 117, 903, 597, 905, 428, 234, 850, 329, 746, 785, 403, 882, 384, 526},
                {355, 656, 274, 914, 852, 951, 948, 944, 391, 748, 529, 679, 156, 342, 620, 0, 732, 428, 690, 315, 598, 859, 616, 401, 723, 214, 348, 512, 354, 103},
                {509, 264, 245, 744, 895, 789, 550, 385, 213, 590, 525, 486, 293, 615, 117, 732, 0, 503, 585, 576, 979, 376, 647, 541, 433, 755, 617, 849, 492, 116},
                {313, 145, 254, 887, 529, 305, 854, 453, 226, 158, 265, 186, 418, 524, 903, 428, 503, 0, 983, 339, 260, 578, 145, 303, 847, 874, 643, 859, 214, 716},
                {643, 416, 114, 471, 582, 552, 239, 324, 538, 882, 292, 954, 746, 509, 597, 690, 585, 983, 0, 237, 254, 671, 688, 517, 429, 517, 308, 492, 558, 560},
                {716, 743, 327, 620, 269, 572, 982, 290, 673, 358, 825, 918, 533, 717, 905, 315, 576, 339, 237, 0, 495, 659, 866, 186, 672, 356, 653, 173, 352, 681},
                {710, 153, 802, 120, 824, 933, 282, 529, 481, 965, 534, 289, 203, 484, 428, 598, 979, 260, 254, 495, 0, 493, 625, 745, 742, 908, 824, 956, 509, 915},
                {231, 430, 482, 491, 658, 329, 897, 802, 992, 177, 259, 114, 482, 682, 234, 859, 376, 578, 671, 659, 493, 0, 998, 118, 548, 489, 594, 616, 384, 345},
                {102, 979, 344, 650, 287, 180, 401, 542, 808, 738, 791, 564, 729, 651, 850, 616, 647, 145, 688, 866, 625, 998, 0, 114, 636, 515, 720, 261, 318, 799},
                {344, 691, 742, 727, 301, 735, 466, 632, 942, 249, 433, 383, 852, 700, 329, 401, 541, 303, 517, 186, 745, 118, 114, 0, 954, 525, 264, 665, 365, 502},
                {965, 802, 107, 494, 950, 122, 326, 939, 730, 150, 825, 862, 510, 816, 746, 723, 433, 847, 429, 672, 742, 548, 636, 954, 0, 679, 189, 974, 206, 318},
                {938, 199, 523, 483, 122, 208, 517, 473, 848, 152, 769, 369, 447, 189, 785, 214, 755, 874, 517, 356, 908, 489, 515, 525, 679, 0, 1000, 506, 753, 921},
                {927, 426, 700, 331, 203, 821, 903, 593, 306, 552, 438, 393, 786, 320, 403, 348, 617, 643, 308, 653, 824, 594, 720, 264, 189, 1000, 0, 973, 574, 602},
                {455, 419, 674, 931, 877, 692, 243, 828, 148, 496, 167, 314, 227, 411, 882, 512, 849, 859, 492, 173, 956, 616, 261, 665, 974, 506, 973, 0, 870, 423},
                {542, 427, 310, 398, 351, 500, 511, 928, 682, 596, 557, 605, 461, 538, 384, 354, 492, 214, 558, 352, 509, 384, 318, 365, 206, 753, 574, 870, 0, 478},
                {700, 832, 159, 201, 712, 748, 233, 962, 328, 102, 168, 570, 918, 231, 526, 103, 116, 716, 560, 681, 915, 345, 799, 502, 318, 921, 602, 423, 478, 0}
        };


        int INF = 1000000000;
        int[][] dp = new int[1 << C][C];
        int[][] parent = new int[1 << C][C];

        for (int i = 0; i < (1 << C); i++) {
            for (int j = 0; j < C; j++) {
                dp[i][j] = INF;
            }
        }
        dp[1][0] = 0;
        long startTime = System.currentTimeMillis();

        for (int mask = 1; mask < (1 << C); mask++) {
            for (int u = 0; u < C; u++) {
                if ((mask & (1 << u)) == 0) continue;
                for (int v = 0; v < C; v++) {
                    if ((mask & (1 << v)) != 0 || u == v) continue;
                    int newMask = mask | (1 << v);
                    if (dp[mask][u] + D[u][v] < dp[newMask][v]) {
                        dp[newMask][v] = dp[mask][u] + D[u][v];
                        parent[newMask][v] = u;
                    }
                }
            }
        }

        int minTourCost = INF;
        int lastCity = -1;
        for (int u = 1; u < C; u++) {
            if (dp[(1 << C) - 1][u] + D[u][0] < minTourCost) {
                minTourCost = dp[(1 << C) - 1][u] + D[u][0];
                lastCity = u;
            }
        }

        int mask = (1 << C) - 1;
        int[] path = new int[C + 1];
        int index = C;
        path[index--] = 0;
        while (lastCity != 0) {
            path[index--] = lastCity;
            int nextCity = parent[mask][lastCity];
            mask ^= (1 << lastCity);
            lastCity = nextCity;
        }
        path[0] = 0;

        System.out.println("Minimum tour cost: " + minTourCost);
        System.out.print("Path: C_0");
        for (int i = 1; i < path.length; i++) {
            System.out.print(" -> C_" + path[i]);
        }
        System.out.println();

        long endTime = System.currentTimeMillis();
        System.out.println("Time taken manually: " + (endTime - startTime) + "ms");
    }
}
