@startuml

/' Définition des classes '/
package "Kronologic" {
    class Personnage {
        - nom: String
        + Personnage(n: String, l: List<Lieu>)
        + getNom(): String
    }

    class Lieu {
        - nom: String
        - Id : Integer
        + Lieu(n: String, i: Integer, l: List<Lieu>)
        + getNom(): String
        + getId(): Integer
        + getListeLieuxAdjacents(): List<Lieu>
    }

    class Temps {
        - temps : Integer
        + Temps(t: Integer)
    }

    package Indice{
        class GestionnaireIndices {
            + GestionnaireIndices(l : List<Indice>)
            + poserQuestionPersonnage(l: Lieu, p: Personnage): Indice
            + poserQuestionTemps(l: Lieu, t: Temps): Indice
        }

        abstract class Indice {
            - lieu: Lieu
            - public: Integer
            + Indice(l: Lieu, p: Integer)
            + toString(): String
            + getLieu(): Lieu
            + getInfoPublic(): Integer
        }

        class IndiceTemps extends Indice {
            - prive: String
            + IndiceTemps(l: Lieu, p: Integer, t: Temps, p: String)
        }

        class IndicePersonnage extends Indice {
            - prive: String
            + IndicePersonnage(l: Lieu, p: Integer, perso: Personnage, p: String)
        }
    }

    abstract class Position {
        + Position(l: Lieu, t: Temps, p: Personnage)
        + getLieu(): Lieu
        + getTemps(): Temps
        + getPersonnage(): Personnage
    }

    class Realite extends Position {
        + Realite(l: Lieu, t: Temps, p: Personnage)
        + getLieu(): Lieu
        + getTemps(): Temps
        + getPersonnage(): Personnage
    }

    class Deroulement {
        + Deroulement(lp: List<Position>)
        + positionsAuTemps(t: Temps): List<Position>
        + positionsDansLieu(l: Lieu): List<Position>
        + positionsDuPersonnage(p: Personnage): List<Position>
    }

    class Hypothese extends Position {
        Servira à la gestion des notes du joueur (qu'on développera dans l'itération2)
    }

    class Enquete {
        - idEnquete : int
        - nomEnquete : String
        - synopsis : String
        - enigme : String
        - loupeOr : int
        - loupeBronze : int
        + Enquete(id: int, n: String, s: String, e: String, lo: int, lb: int)
        + getIdEnquete(): int
        + getNomEnquete(): String
        + getSynopsis(): String
        + getEnigme(): String
        + getMeurtrier(): Personnage
        + getLieuMeurtre(): Lieu
        + getTempsMeurtre(): Temps
        + getLoupeOr(): int
        + getLoupeBronze(): int
    }

    class Partie {
        - nbQuestion: Integer
        + Partie(e: Enquete, d: Deroulement, gn: GestionnaireNotes, gi: GestionnaireIndices)
        + poserQuestionPersonnage(l: Lieu, p: Personnage): Indice
        + poserQuestionTemps(l: Lieu, t: Temps): Indice
        + faireDeduction(p: Personnage, l: Lieu, t: Temps): boolean
        + demanderIndice(): Indice
    }
}

/' Relations entre les classes de Kronologic '/
Lieu "1" -- "2..*" Lieu : - listeLieuxAdjacents
Partie "1" --> "1" Enquete : - enquete
Partie "1" -- "1" Kronologic.Indice.GestionnaireIndices : - gestionnaireIndices
Partie "1" -- "0..*" Kronologic.Indice.Indice : - indicesDecouverts
Partie "1" --> "1" Deroulement : - deroulement
Enquete "1" --> "1" Personnage : - meurtrier
Enquete "1" --> "1" Lieu : - lieuMeurtre
Enquete "1" --> "1" Temps : - tempsMeurtre
GestionnaireIndices "1" --> "*" Kronologic.Indice.Indice : - listeIndices
IndiceTemps "1" --> "1" Temps : - temps
IndicePersonnage "1" --> "1" Personnage : - personnage
Position "1" --> "1" Lieu : - lieu
Position "1" --> "1" Temps : - temps
Position "1" --> "1" Personnage : - personnage
Deroulement "1" --> "*" Realite : - listePositions

/'package Pions {
        abstract class Pion {
            - {final} id: Integer
            - hypothese: boolean
            - idLieu: Integer
            - temps: Integer
            + Pion(i: Integer, h: boolean)
            + deplacerPion(l: Integer, t:Temps): void
        }

        class PionPersonnage extends Pion {
            - absences: boolean
            - personnage: Personnage
            + PionPersonnage(i: Integer, h: boolean, a: boolean, p: Personnage)
        }

        class PionNombre extends Pion {
            - nombre : Integer
            + PionNombre(i: Integer, h: boolean)
            + modifierNombre(n: Integer): void
        }
    }


    package "Pions" {
        class Pion {
            - {final} id: Integer
            - {final} perso: Personnage
            - lieu: Lieu
            - temps: Temps
            - x: Integer
            - y: Integer
            -
        }
    }'/

/' MVC '/
package "MVC" {

    package "Modele" {
        interface Sujet {
            + enregistrerObservateur(o: Observateur): void
            + supprimerObservateur(o: Observateur): void
            + notifierObservateurs(): void
        }

        class ModeleAccueil implements MVC.Modele.Sujet {
            + enregistrerObservateur(o: Observateur): void
            + supprimerObservateur(o: Observateur): void
            + notifierObservateurs(): void
            + initialiserPartie(s: String): void
            + quitterJeu(): void
        }

        class ModeleJeu implements MVC.Modele.Sujet {
            - partie: Partie
            - vueCarte : boolean
            - deductionLieu : Lieu
            - deductionPersonnage : Personnage
            - deductionTemps : Integer
            + enregistrerObservateur(o: Observateur): void
            + supprimerObservateur(o: Observateur): void
            + notifierObservateurs(): void
            + changerAffichage(): void
            + poserQuestion(l: Lieu, p: Personnage, t: Integer): Indice
            + visualiserPoseQuestion(): void
            + choix(l: Lieu, p: Personnage, t: Temps): void
            + faireDeduction(l: Lieu, p: Personnage, t: Integer): boolean
            + visualiserDeduction(): void
            + voirDeductionIA(): void
            + demanderIndice(): Indice
            + visualiserFilm(): void
            + visualiserRegle(): void
            + valider(): void
            + quitter(): void
            + afficherPionsDeplacables(): void
            + activerDragAndDropPions(): void
            + afficherPositionPion(p: Pion): void
        }
    }

    package "Vue" {
        interface Observateur {
            + actualiser(sujet: Sujet): void
        }

        class VueAccueil extends GridPane implements MVC.Vue.Observateur{
            + afficher(s: Stage): void
            + actualiser(): void
        }

        class VueCarte extends GridPane implements MVC.Vue.Observateur {
            + afficher(s: Stage): void
            + afficherCarte(): void
            + afficherPions(): void
            + afficherBoutons(): void
            + afficherHistorique() : void
            + afficherRegle(): void
            + afficherFilm(): void
            + afficherPresenceAbsence(): void
            + afficherHypothese(): void
            + actualiser(): void
        }

        class VueTableau extends GridPane implements MVC.Vue.Observateur {
            + afficher(s: Stage): void
            + afficherTableaux(): void
            + afficherBoutons(): void
            + afficherHistorique() : void
            + afficherRegle(): void
            + afficherFilm(): void
            + actualiser(): void
        }

        class VueRegle extends GridPane implements MVC.Vue.Observateur {
            + afficher(s: Stage): void
            + actualiser(): void
        }

        class VueFilm extends GridPane implements MVC.Vue.Observateur {
            + afficher(s: Stage): void
            + actualiser(): void
        }

        class VuePoseQuestion extends GridPane implements MVC.Vue.Observateur {
            + afficher(s: Stage): void
            + afficherPionsSelectionnables(): void
            + afficherValiderQuitter(): void
            + actualiser(): void
        }

        class VueDeduction extends GridPane implements MVC.Vue.Observateur {
            + afficher(s: Stage): void
            + afficherPionsSelectionnables(): void
            + afficherValiderQuitter(): void
            + actualiser(): void
        }

        class VuePopUp extends GridPane implements MVC.Vue.Observateur {
            + afficher(s: Stage): void
            + afficherMessage(s: String): void
            + afficherValiderQuitter(): void
            + actualiser(): void
        }
    }

    package "Controleur" {
            class ControleurInitialisation extends EventHandler<ActionEvent>{
                + ControleurInitialisation(m: ModeleAccueil): void
                + handle(e: ActionEvent): void
            }

            class ControleurQuitterJeu extends EventHandler<ActionEvent> {
                + ControleurQuitterJeu(m: ModeleAccueil): void
                + handle(e: ActionEvent): void
            }

            class ControleurAffichage extends EventHandler<ActionEvent> {
                + ControleurAffichage(m: ModeleAccueil): void
                + handle(e: ActionEvent): void
            }

            class ControleurPoseQuestion extends EventHandler<ActionEvent> {
                + ControleurPoseQuestion(m: ModeleAccueil): void
                + handle(e: ActionEvent): void
            }

            class ControleurChoixPoseQuestion extends EventHandler<ActionEvent> {
                + ControleurChoixPoseQuestion(m: ModeleAccueil): void
                + handle(e: ActionEvent): void
            }

            class ControleurVisualiserPoseQuestion extends EventHandler<ActionEvent> {
                + ControleurVisualiserPoseQuestion(m: ModeleAccueil): void
                + handle(e: ActionEvent): void
            }

            class ControleurDeduction extends EventHandler<ActionEvent>{
                + ControleurDeduction(s: Stage): void
                + handle(e: ActionEvent): void
            }

            class ControleurChoixDeduction extends EventHandler<ActionEvent> {
                + ControleurChoixDeduction(m: ModeleAccueil): void
                + handle(e: ActionEvent): void
            }

            class ControleurVisualiserDeduction extends EventHandler<ActionEvent> {
                + ControleurVisualiserDeduction(s: Stage): void
                + handle(e: ActionEvent): void
            }

            class ControleurVoirDeductionIA extends EventHandler<ActionEvent> {
                + ControleurVoirDeductionIA(s: Stage): void
                + handle(e: ActionEvent): void
            }

            class ControleurDemanderIndice extends EventHandler<ActionEvent> {
                + ControleurDemanderIndice(s: Stage): void
                + handle(e: ActionEvent): void
            }

            class ControleurVisualiserFilm extends EventHandler<ActionEvent> {
                + ControleurVisualiserFilm(s: Stage): void
                + handle(e: ActionEvent): void
            }

            class ControleurVisualiserRegle extends EventHandler<ActionEvent> {
                + ControleurVisualiserRegle(s: Stage): void
                + handle(e: ActionEvent): void
            }

            /' Comment savoir qu'est ce qu'on quitte et qu'est ce qu'on valide'/
            class ControleurValider extends EventHandler<ActionEvent> {
                + ControleurValider(s: Stage): void
                + handle(e: ActionEvent): void
            }

            class ControleurQuitter extends EventHandler<ActionEvent> {
                + ControleurQuitter(s: Stage): void
                + handle(e: ActionEvent): void
            }
    }
}

/' Association MVC '/

/' Modele '/
ModeleJeu "1" --> "*" MVC.Vue.Observateur : - observateurs: List<Observateur>
ModeleAccueil "1" --> "*" MVC.Vue.Observateur : - observateurs: List<Observateur>

/' Vue '/

/' Controleur Accueil '/
ControleurInitialisation "1" --> "1" ModeleAccueil : - modele: ModeleAccueil
ControleurQuitterJeu "1" --> "1" ModeleAccueil : - modele: ModeleAccueil

/' Controleur Jeu '/
ControleurAffichage "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurPoseQuestion "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurChoixPoseQuestion "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurVisualiserPoseQuestion "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurDeduction "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurChoixDeduction "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurVisualiserDeduction "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurVoirDeductionIA "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurDemanderIndice "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurVisualiserFilm "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurVisualiserRegle "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurValider "1" --> "1" ModeleJeu : - modele: ModeleJeu
ControleurQuitter "1" --> "1" ModeleJeu : - modele: ModeleJeu

remove MVC.Controleur
remove MVC.Vue.VueAccueil
remove MVC.Vue.VueFilm
remove MVC.Vue.VueRegle
remove MVC.Vue.VuePoseQuestion
remove MVC.Vue.VuePopUp



@enduml